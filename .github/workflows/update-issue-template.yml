name: Update Issue Template Versions

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'  # Wenn ein neuer Tag gepusht wird
  schedule:
    - cron: '0 0 * * *' # täglich um Mitternacht, z. B. für HA-Versionen

jobs:
  update-template:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # notwendig für git-auto-commit-action

    steps:
      # 1️⃣ Checkout mit allen Tags
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2️⃣ Tags aus eigenem Repo sammeln
      - name: Get all tags
        id: get_tags
        run: |
          TAGS=$(git tag --sort=-v:refname | grep '^v' | sed 's/^v//' | jq -R -s -c 'split("\n")[:-1]')
          if [ "$TAGS" = "[]" ] || [ -z "$TAGS" ]; then
            echo "⚠️ Keine Tags gefunden!"
          else
            echo "Tags found: $TAGS"
          fi
          echo "TAGS=$TAGS" >> $GITHUB_ENV

      # 3️⃣ Python-Skript: Issue Template updaten
      - name: Update Issue Template with Python
        env:
          TAGS: ${{ env.TAGS }}
        run: |
          python - <<'PY'
          import os, json, sys, re, requests
          try:
              import yaml
          except ImportError:
              import subprocess
              subprocess.check_call([sys.executable, "-m", "pip", "install", "--quiet", "pyyaml"])
              import yaml

          # === 1️⃣ card_version aus Repo-Tags ===
          TAGS_JSON = os.environ.get("TAGS", "[]")
          try:
              card_versions = json.loads(TAGS_JSON)
          except Exception as e:
              print("Error parsing TAGS JSON:", e)
              card_versions = []

          # === 2️⃣ ha_version aus Home-Assistant-Core Tags ===
          url = "https://api.github.com/repos/home-assistant/core/tags?per_page=100"
          try:
              resp = requests.get(url)
              resp.raise_for_status()
              ha_tags = [t['name'] for t in resp.json()]
          except Exception as e:
              print("Error fetching HA tags:", e)
              ha_tags = []

          version_pattern = re.compile(r'^\d+\.\d+\.\d+(b\d+)?$')
          ha_versions = [v for v in ha_tags if version_pattern.match(v)]

          def version_key(v):
              m = re.match(r'(\d+)\.(\d+)\.(\d+)(b(\d+))?', v)
              major, minor, patch, _, beta = m.groups()
              major, minor, patch = int(major), int(minor), int(patch)
              beta = int(beta) if beta else -1
              return (major, minor, patch, beta)

          ha_versions.sort(key=version_key, reverse=True)

          # Letzte 3 Major-Versionen
          major_versions = sorted({v.split('.')[0] + '.' + v.split('.')[1] for v in ha_versions}, reverse=True)[:3]
          ha_versions_filtered = [v for v in ha_versions if v.split('.')[0]+'.'+v.split('.')[1] in major_versions]

          print("card_versions:", card_versions)
          print("ha_versions (filtered):", ha_versions_filtered)

          # === 3️⃣ YAML Datei aktualisieren ===
          FILE = ".github/ISSUE_TEMPLATE/bug_report.yml"
          if not os.path.exists(FILE):
              print(f"Error: {FILE} not found")
              sys.exit(1)

          with open(FILE, "r", encoding="utf-8") as f:
              data = yaml.safe_load(f)

          if data is None:
              print("Error: YAML file empty or invalid")
              sys.exit(1)

          updated_card = updated_ha = False
          for item in data.get("body", []):
              if isinstance(item, dict):
                  if item.get("id") == "card_version":
                      attrs = item.get("attributes") or {}
                      attrs["options"] = card_versions
                      item["attributes"] = attrs
                      if card_versions:
                          item["default"] = 0
                      updated_card = True
                  elif item.get("id") == "ha_version":
                      attrs = item.get("attributes") or {}
                      attrs["options"] = ha_versions_filtered
                      item["attributes"] = attrs
                      if ha_versions_filtered:
                          item["default"] = 0
                      updated_ha = True

          if not (updated_card or updated_ha):
              print("Warning: Kein Eintrag mit id 'card_version' oder 'ha_version' gefunden.")
          else:
              with open(FILE, "w", encoding="utf-8") as f:
                  yaml.safe_dump(data, f, allow_unicode=True, sort_keys=False)
              print(f"Successfully updated {FILE}")
          PY

      # 4️⃣ Commit & Push
      - name: Commit & Push changes
        uses: stefanzweifel/git-auto-commit-action@v7
        with:
          commit_message: "Update issue template with latest versions"
          branch: main
          file_pattern: ".github/ISSUE_TEMPLATE/bug_report.yml"
