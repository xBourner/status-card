name: Update Issue Template Versions

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'
  schedule:
    - cron: '0 0 * * *'  # optional: täglicher Cron-Job

jobs:
  update-template:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # 1️⃣ Tags für die Karte sammeln
      - name: Get Card Version Tags
        id: get_card_tags
        run: |
          TAGS=$(git tag --sort=-v:refname | grep '^v' | sed 's/^v//' | jq -R -s -c 'split("\n")[:-1]')
          echo "TAGS=$TAGS" >> $GITHUB_ENV

      # 2️⃣ HA Versionen abrufen
      - name: Get HA Version Tags
        id: get_ha_tags
        run: |
          HA_TAGS=$(git ls-remote --tags https://github.com/home-assistant/core.git \
            | awk -F'/' '{print $3}' \
            | grep -E '^20[0-9]{2}\.[0-9]+\.[0-9]+b?[0-9]*$' \
            | sort -Vr \
            | awk -F. '{maj=$1"."$2} {print $0}' \
            | awk '!a[$0]++' \
            | grep -E '^202[0-9]\.' \
            | head -n 50 \
            | jq -R -s -c 'split("\n")[:-1]')
          echo "HA_TAGS=$HA_TAGS" >> $GITHUB_ENV

      # 3️⃣ Python: Issue Template updaten
      - name: Update Issue Template with Python
        env:
          CARD_TAGS: ${{ env.TAGS }}
          HA_TAGS: ${{ env.HA_TAGS }}
        run: |
          python - <<'PY'
          import os, json, sys
          try:
              import yaml
          except ImportError:
              import subprocess
              subprocess.check_call([sys.executable, "-m", "pip", "install", "--quiet", "pyyaml"])
              import yaml

          CARD_TAGS = json.loads(os.environ.get("CARD_TAGS", "[]"))
          HA_TAGS = json.loads(os.environ.get("HA_TAGS", "[]"))

          FILE = ".github/ISSUE_TEMPLATE/bug_report.yml"
          if not os.path.exists(FILE):
              print(f"Error: {FILE} not found")
              sys.exit(1)

          with open(FILE, "r", encoding="utf-8") as f:
              data = yaml.safe_load(f)

          if data is None:
              print("Error: YAML file empty or invalid")
              sys.exit(1)

          def update_dropdown(field_id, options):
              for item in data.get("body", []):
                  if isinstance(item, dict) and item.get("id") == field_id:
                      attrs = item.get("attributes") or {}
                      attrs["options"] = options
                      item["attributes"] = attrs
                      if "default" in item:
                          del item["default"]
                      break

          update_dropdown("card_version", CARD_TAGS)
          update_dropdown("ha_version", HA_TAGS)

          with open(FILE, "w", encoding="utf-8") as f:
              yaml.safe_dump(data, f, allow_unicode=True, sort_keys=False)

          print("Successfully updated", FILE)
          for item in data.get("body", []):
              if isinstance(item, dict) and item.get("id") in ["card_version", "ha_version"]:
                  print(f"Options for {item['id']}:")
                  for v in item.get("attributes", {}).get("options", []):
                      print("-", v)
          PY

      # 4️⃣ Commit und Push
      - uses: stefanzweifel/git-auto-commit-action@v7
        with:
          commit_message: Update issue template with latest versions
          branch: main
          file_pattern: .github/ISSUE_TEMPLATE/bug_report.yml
